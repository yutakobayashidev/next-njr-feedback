
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider        = "prisma-client-js"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  createdAt           DateTime?    @default(now())  
  updatedAt           DateTime?    @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime?    @default(now())
  updatedAt    DateTime?    @updatedAt

  @@index([userId])
}

model Discussion {
  id            Int      @id @default(autoincrement())
  title         String
  course        Int
  body          String   @db.Text
  totalComments Int      @default(0)
  vote          Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userId        String
  user          User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Knowledge {
  id            Int      @id @default(autoincrement())
  title         String
  course        Int
  body          String   @db.Text
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userId        String
  user          User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  bio           String?   @db.VarChar(191)
  name          String?
  displayname   String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  admin         Boolean @default(false)
  leave         Boolean @default(false)
  contributor   Boolean @default(false)
  createdAt           DateTime?    @default(now())
  updatedAt           DateTime?    @updatedAt
  discussion    Discussion[]
  knowledge    Knowledge[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime?    @default(now())
  updatedAt  DateTime?    @updatedAt

  @@unique([identifier, token])
}